def fib4
  init:
    check_size 4 ;input
    branch :le 4 #0 1 :ret_1
  rec:
    extend 4
    add 4 #0 -1 #-4
    call -4 :fib4

    extend 4
    add 4 #0 -2 #-4
    call -4 :fib4

    add 4 #4 #8 #0
    shrink 8
    jump :finish
  ret_1:
    set 4 1 #0
  finish:
    not_specialize 4 #0
    check_size 4 ;output

def fib8
  init:
    check_size 4 ;input
    branch :le 4 #0 1 :ret_1
  rec:
    extend 4
    add 4 #0 -1 #-4
    call -4 :fib8

    extend 4
    add 4 #0 -2 #-4
    call -4 :fib8

    add 8 #4 #12 #0
    shrink 12
    jump :finish
  ret_1:
    extend 4
    set 8 1 #0
  finish:
    not_specialize 8 #0
    check_size 8 ;output

def fibx
  init:
    check_size 8 ;input
    branch :le 4 #4 1 :ret_1
  rec:
    extend 8
    set 4 #0 #-8
    add 4 #4 -1 #-4
    call -8 :fibx

    extend 8
    set 4 #0 #-8
    add 4 #4 -2 #-4
    call -8 :fibx

    extend 4
    add 4 #0 16 #-4 ;second result offset, x input x res1 x res2

    add $0 #12 #$-4 #4

    add 4 #0 12 #-4 ; input x res1 x
    shrink $-4
    shrink 4
    jump :finish
  ret_1:
    ; size is 4 + 4 = 8, result is of size 4+$0, so we need to extend on $0 - 4
    extend 4
    add 4 #0 -4 #-4
    extend $-4
    shrink 4

    set $0 1 #4
  finish:
    not_specialize $0 #4

    ; this all can be just `check_size [$0+4]`, should it be?
    extend 4 ;input length
    add 4 #0 8 #-4 ;input length + output length + 4 additional bytes for checker
    check_size $-4
    shrink 4
